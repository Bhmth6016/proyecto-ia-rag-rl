#src/core/rag/advanced/prompts/__init__.py
# src/core/rag/advanced/prompts/__init__.py

from langchain_core.prompts import ChatPromptTemplate

# Prompt principal para generaci√≥n RAG
RAG_PROMPT_TEMPLATE = ChatPromptTemplate.from_template("""
You are an Amazon product recommender. Recommend products matching:

User Query: {question}

Context:
{context}

Format each recommendation with:
1. üè∑Ô∏è Product: [Name]
2. üíµ Price: [Price]
3. ‚≠ê Rating: [Rating]/5
4. üìù Why Recommended: [Explanation]
""")

# Prompt para reescritura de preguntas
QUERY_REWRITE_SYSTEM = """Eres un especialista en mejorar consultas de b√∫squeda para Amazon. Realiza:

- Expansi√≥n de abreviaturas/acr√≥nimos.
- Adici√≥n de contexto impl√≠cito.
- Clarificaci√≥n de t√©rminos ambiguos.
- Inclusi√≥n de sin√≥nimos relevantes.
- Preservaci√≥n de la intenci√≥n original.

Devuelve SOLO la consulta mejorada, sin explicaciones."""
QUERY_REWRITE_PROMPT = ChatPromptTemplate.from_messages([
    ("system", QUERY_REWRITE_SYSTEM),
    ("human", "Consulta original: {query}\nConsulta mejorada:")
])

# Prompt para validaci√≥n de respuestas
VALIDATION_PROMPT = ChatPromptTemplate.from_messages([
    (
        "system",
        """Eval√∫a si la respuesta est√° completamente soportada por el contexto.

Responde EXCLUSIVAMENTE con:
- 'yes' si toda la informaci√≥n est√° respaldada.
- 'no' seguido de los fragmentos no soportados entre par√©ntesis si hay alucinaciones."""
    ),
    (
        "human",
        """Contexto:
{context}

Respuesta a evaluar:
{answer}

¬øEst√° completamente soportada? Responde (yes/no):"""
    )
])

# Prompt para evaluaci√≥n de relevancia
RELEVANCE_PROMPT = ChatPromptTemplate.from_messages([
    (
        "system",
        """Eval√∫a la relevancia del documento para responder la pregunta.

Formato:
Evaluaci√≥n: [yes/no] (breve explicaci√≥n)

Ejemplo:
Documento: "Bater√≠a de 4000mAh"
Pregunta: "¬øCu√°nto dura la bater√≠a?"
Evaluaci√≥n: yes (menciona capacidad de bater√≠a)"""
    ),
    (
        "human",
        """Documento:
{document}

Pregunta:
{question}

Evaluaci√≥n:"""
    )
])

# Prompt para detecci√≥n de alucinaciones
HALLUCINATION_PROMPT = ChatPromptTemplate.from_messages([
    (
        "system",
        """Identifica cualquier informaci√≥n en la respuesta que NO est√© respaldada por los documentos.

Responde con:
- 'yes' si est√° completamente respaldada.
- 'no' seguido de los fragmentos no soportados.

Ejemplo:
Documentos: "Pantalla de 6.1 pulgadas"
Respuesta: "Tiene pantalla de 6.1 pulgadas y resistencia al agua"
Evaluaci√≥n: no (resistencia al agua)"""
    ),
    (
        "human",
        """Documentos de referencia:
{documents}

Respuesta a evaluar:
{generation}

Evaluaci√≥n:"""
    )
])

# Prompt para evaluaci√≥n de calidad de respuestas
ANSWER_QUALITY_PROMPT = ChatPromptTemplate.from_messages([
    (
        "system",
        """Eval√∫a la calidad de la respuesta (1 a 5) basado en:

- Precisi√≥n (basada en hechos)
- Completitud (cubre todos los aspectos)
- Claridad (f√°cil de entender)
- Utilidad (resuelve la pregunta)

Formato:
Puntuaci√≥n: [1-5]
Explicaci√≥n: [breve justificaci√≥n]
Mejoras: [sugerencias si aplica; solo si la puntuaci√≥n es <4]"""
    ),
    (
        "human",
        """Pregunta original:
{question}

Respuesta evaluada:
{answer}

Por favor eval√∫a:"""
    )
])

# Exportaci√≥n controlada
__all__ = [
    "RAG_PROMPT_TEMPLATE",
    "QUERY_REWRITE_PROMPT",
    "VALIDATION_PROMPT",
    "RELEVANCE_PROMPT",
    "HALLUCINATION_PROMPT",
    "ANSWER_QUALITY_PROMPT"
]